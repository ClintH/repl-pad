{"version":3,"sources":["../src/text.ts"],"sourcesContent":["export const between = (source: string, start: string, end?: string, lastEndMatch = true): string | undefined => {\r\n  const startPos = source.indexOf(start);\r\n  if (startPos < 0) return;\r\n\r\n  if (end === undefined) end = start;\r\n\r\n  const endPos = (lastEndMatch) ? source.lastIndexOf(end) : source.indexOf(end, startPos + 1);\r\n  if (endPos < 0) return;\r\n\r\n  return source.substring(startPos + 1, endPos);\r\n};\r\n\r\n\r\nexport const unwrap = (source: string, ...wrappers: string[]): string => {\r\n  let matched = false;\r\n  do {\r\n    matched = false;\r\n    for (const w of wrappers) {\r\n      if (source.startsWith(w) && source.endsWith(w)) {\r\n        source = source.substring(w.length, source.length - (w.length * 2) + 1);\r\n        matched = true;\r\n      }\r\n    }\r\n  } while (matched);\r\n\r\n  return source;\r\n}\r\n\r\nexport type Range = {\r\n  text: string\r\n  start: number\r\n  end: number\r\n  index: number\r\n}\r\n\r\nexport type LineSpan = {\r\n  start: number\r\n  end: number\r\n  length: number\r\n}\r\nexport const lineSpan = (ranges: Range[], start: number, end: number): LineSpan => {\r\n  let s = -1;\r\n  let e = -1;\r\n  for (let i = 0; i < ranges.length; i++) {\r\n    const r = ranges[i];\r\n    s = i;\r\n    if (r.text.length === 0) continue;\r\n    if (start < r.end) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  for (let i = s; i < ranges.length; i++) {\r\n    const r = ranges[i];\r\n    e = i;\r\n    if (end === r.end) {\r\n      e = i + 1;\r\n      break;\r\n    }\r\n    if (end < r.end) {\r\n      break;\r\n    }\r\n  }\r\n  return {length: e - s, start: s, end: e};\r\n}\r\n\r\nexport const splitRanges = (source: string, split: string) => {\r\n  let start = 0;\r\n  let text = ``;\r\n  const ranges: Range[] = [];\r\n  let index = 0;\r\n  for (let i = 0; i < source.length; i++) {\r\n    if (source.indexOf(split, i) === i) {\r\n      //i += split.length - 1;\r\n      let end = i;\r\n      ranges.push({\r\n        text, start, end, index\r\n      });\r\n      start = end + 1;\r\n      text = ``;\r\n      index++;\r\n    } else {\r\n      text += source.charAt(i);\r\n    }\r\n  }\r\n  if (start < source.length) {\r\n    ranges.push({text, start, index, end: source.length});\r\n  }\r\n  return ranges;\r\n}\r\n\r\nexport const countCharsFromStart = (source: string, ...chars: string[]): number => {\r\n  let counted = 0;\r\n  for (let i = 0; i < source.length; i++) {\r\n    if (chars.includes(source.charAt(i))) {\r\n      counted++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return counted;\r\n}\r\n\r\n/**\r\n * Returns _true_ if `source` starts and ends with `start` and `end`. Case-sensitive.\r\n * If _end_ is omitted, the the `start` value will be used.\r\n * \r\n * ```js\r\n * startsEnds(`This is a string`, `This`, `string`); // True\r\n * startsEnds(`This is a string`, `is`, `a`); // False\r\n * starsEnds(`test`, `t`); // True, starts and ends with 't'\r\n * ```\r\n * @param source String to search within \r\n * @param start Start\r\n * @param end End (if omitted, start will be looked for at end as well)\r\n * @returns True if source starts and ends with provided values.\r\n */\r\nexport const startsEnds = (source: string, start: string, end: string = start): boolean => source.startsWith(start) && source.endsWith(end);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaO,IAAM,SAAS,CAAC,WAAmB,aAA+B;AACvE,MAAI,UAAU;AACd,KAAG;AACD,cAAU;AACV,eAAW,KAAK,UAAU;AACxB,UAAI,OAAO,WAAW,MAAM,OAAO,SAAS,IAAI;AAC9C,iBAAS,OAAO,UAAU,EAAE,QAAQ,OAAO,SAAU,EAAE,SAAS,IAAK;AACrE,kBAAU;AAAA;AAAA;AAAA,WAGP;AAET,SAAO;AAAA;AAeF,IAAM,WAAW,CAAC,QAAiB,OAAe,QAA0B;AACjF,MAAI,IAAI;AACR,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,IAAI,OAAO;AACjB,QAAI;AACJ,QAAI,EAAE,KAAK,WAAW;AAAG;AACzB,QAAI,QAAQ,EAAE,KAAK;AACjB;AAAA;AAAA;AAIJ,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,IAAI,OAAO;AACjB,QAAI;AACJ,QAAI,QAAQ,EAAE,KAAK;AACjB,UAAI,IAAI;AACR;AAAA;AAEF,QAAI,MAAM,EAAE,KAAK;AACf;AAAA;AAAA;AAGJ,SAAO,EAAC,QAAQ,IAAI,GAAG,OAAO,GAAG,KAAK;AAAA;AAGjC,IAAM,cAAc,CAAC,QAAgB,UAAkB;AAC5D,MAAI,QAAQ;AACZ,MAAI,OAAO;AACX,QAAM,SAAkB;AACxB,MAAI,QAAQ;AACZ,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,QAAI,OAAO,QAAQ,OAAO,OAAO,GAAG;AAElC,UAAI,MAAM;AACV,aAAO,KAAK;AAAA,QACV;AAAA,QAAM;AAAA,QAAO;AAAA,QAAK;AAAA;AAEpB,cAAQ,MAAM;AACd,aAAO;AACP;AAAA,WACK;AACL,cAAQ,OAAO,OAAO;AAAA;AAAA;AAG1B,MAAI,QAAQ,OAAO,QAAQ;AACzB,WAAO,KAAK,EAAC,MAAM,OAAO,OAAO,KAAK,OAAO;AAAA;AAE/C,SAAO;AAAA;AAGF,IAAM,sBAAsB,CAAC,WAAmB,UAA4B;AACjF,MAAI,UAAU;AACd,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,QAAI,MAAM,SAAS,OAAO,OAAO,KAAK;AACpC;AAAA,WACK;AACL;AAAA;AAAA;AAGJ,SAAO;AAAA;","names":[]}