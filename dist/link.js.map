{"version":3,"sources":["../src/link.ts"],"sourcesContent":["import {countCharsFromStart} from './text';\r\n\r\n/**\r\n * Returns a URI for source contained in an element's innerText\r\n * \r\n * ```js\r\n * const uri = fromInnerText(document.getELementById(`someEl`), `pad.html`);\r\n * // Yields: pad.html#...\r\n * ```\r\n * \r\n * @param dom Dom element\r\n * @param baseUri Base uri to prefix\r\n * @returns String\r\n */\r\nexport const fromInnerText = (dom: HTMLElement, baseUri: string = ''): string => {\r\n  if (dom === null) throw new Error(`dom parameter is null`);\r\n  if (dom === undefined) throw new Error(`dom parameter is undefined`);\r\n  let src = dom.innerText;\r\n  return fromText(src, baseUri);\r\n}\r\n\r\n/**\r\n * Returns a URI for source contained in a string\r\n * @param src\r\n * @param baseUri \r\n * @returns \r\n */\r\nexport const fromText = (src: string, baseUri: string = ''): string => {\r\n  // Check for consistent indents\r\n  let lines = src.split('\\n');\r\n  let spacing = Number.MAX_SAFE_INTEGER;\r\n\r\n  lines.forEach(l => {\r\n    if (l.trim().length == 0) return;\r\n    spacing = Math.min(spacing, countCharsFromStart(l, ` `));\r\n  });\r\n\r\n  src = lines.map(l => l.substring(spacing)).join('\\n');\r\n\r\n  if (!baseUri.endsWith(`#`)) baseUri += `#`;\r\n  return baseUri + btoa(src);\r\n}\r\n\r\nexport type Result = {el: HTMLElement, uri: string};\r\n\r\n/**\r\n * Returns an array of [element,string] pairs, from the basis of a DOM query.\r\n * \r\n * ```js\r\n * // Generate URIs for every PRE on the page\r\n * const r = fromQuery(`pre`, `pad.html`);\r\n * \r\n * for (const pair in r) {\r\n *  pair[0].append(pair[1]);\r\n * }\r\n * ```\r\n * @param q \r\n * @param baseUri \r\n * @returns \r\n */\r\nexport const fromQuery = (q: string, baseUri: string = ''): ReadonlyArray<Result> => {\r\n  const els = document.querySelectorAll(q);\r\n  const results: Result[] = [];\r\n  for (const el of els) {\r\n    const uri = fromInnerText(el as HTMLElement, baseUri);\r\n    results.push({el: el as HTMLElement, uri});\r\n  }\r\n  return results;\r\n}\r\n"],"mappings":";;;;;AAcO,IAAM,gBAAgB,CAAC,KAAkB,UAAkB,OAAe;AAC/E,MAAI,QAAQ;AAAM,UAAM,IAAI,MAAM,uBAAuB;AACzD,MAAI,QAAQ;AAAW,UAAM,IAAI,MAAM,4BAA4B;AACnE,MAAI,MAAM,IAAI;AACd,SAAO,SAAS,KAAK,OAAO;AAC9B;AAQO,IAAM,WAAW,CAAC,KAAa,UAAkB,OAAe;AAErE,MAAI,QAAQ,IAAI,MAAM,IAAI;AAC1B,MAAI,UAAU,OAAO;AAErB,QAAM,QAAQ,OAAK;AACjB,QAAI,EAAE,KAAK,EAAE,UAAU;AAAG;AAC1B,cAAU,KAAK,IAAI,SAAS,oBAAoB,GAAG,GAAG,CAAC;AAAA,EACzD,CAAC;AAED,QAAM,MAAM,IAAI,OAAK,EAAE,UAAU,OAAO,CAAC,EAAE,KAAK,IAAI;AAEpD,MAAI,CAAC,QAAQ,SAAS,GAAG;AAAG,eAAW;AACvC,SAAO,UAAU,KAAK,GAAG;AAC3B;AAmBO,IAAM,YAAY,CAAC,GAAW,UAAkB,OAA8B;AACnF,QAAM,MAAM,SAAS,iBAAiB,CAAC;AACvC,QAAM,UAAoB,CAAC;AAC3B,aAAW,MAAM,KAAK;AACpB,UAAM,MAAM,cAAc,IAAmB,OAAO;AACpD,YAAQ,KAAK,EAAC,IAAuB,IAAG,CAAC;AAAA,EAC3C;AACA,SAAO;AACT;","names":[]}